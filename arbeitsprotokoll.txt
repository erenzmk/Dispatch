8. August 2025
- Verzeichnisse logs/, results/, archive/ sowie überflüssige Daten entfernt.
- .gitignore um ganze Verzeichnisse und Muster (*.xlsx, *.csv, *.md) erweitert.
- Platzhalter data/reports/.gitkeep angelegt.
- Überprüfung auf __pycache__-Ordner: keine gefunden; `git rm` meldete keine Treffer.
- Kommentar für Python-Cache-Verzeichnisse in .gitignore ergänzt.
- Tests mit pytest ausgeführt – 49 bestanden.
- dispatch/requirements.txt entfernt und Abhängigkeiten in pyproject.toml im Projektwurzelverzeichnis definiert.
- PySimpleGUI als optionale GUI-Abhängigkeit über Extras [gui] konfiguriert.
- Tests mit pytest ausgeführt – 49 bestanden.
8. August 2025 (Fortsetzung)
- subprocess.run durch direkte Funktionsaufrufe ersetzt; GUI nutzt jetzt
  dispatch.process_reports und analyze_month direkt.
- Log-Verzeichnis über DISPATCH_LOG_DIR konfigurierbar, Standard im
  temporären Verzeichnis.
- CLI-Entry-Points dispatch und dispatch-gui in pyproject.toml ergänzt.
- Tests mit pytest ausgeführt – 49 bestanden.
8. August 2025 (Fortsetzung 2)
- Alle Projektdateien auf Byte Order Mark (BOM) geprüft; keine BOM gefunden.
- arbeitsprotokoll.txt ohne BOM gespeichert.
- Tests mit pytest ausgeführt – 49 bestanden.
8. August 2025 (Fortsetzung 3)
- pyproject.toml um Autorenfeld und Lizenzreferenz ergänzt.
- MIT-Lizenzdatei LICENSE erstellt.
- Tests mit pytest ausgeführt – fehlende Abhängigkeiten verhinderten das Laden der Module.
8. August 2025 (Fortsetzung 4)
- README um Abschnitte zu Entwicklungsumgebung, Testausführung und Verzeichnisstruktur ergänzt.
- Unterschied zwischen Beispiel- und Produktionsdaten dokumentiert.
- requirements.txt erstellt und Verweis auf pyproject.toml aufgenommen.
- Tests mit pytest ausgeführt – 49 bestanden.
8. August 2025 (Fortsetzung 5)
- update_liste prüft jetzt das Datumsfeld und beschreibt Zeilen nur bei leerem oder passendem Datum.
- Techniker werden erst nach erfolgreichem Schreiben aus der Restliste entfernt, damit Warnungen bleiben.
- Unit-Test ergänzt, der mehrere Zeilen eines Technikers mit unterschiedlichem Datum prüft.
- Tests mit pytest ausgeführt – 50 bestanden.
8. August 2025 (Fortsetzung 6)
- Skript run_current_month.pyw erstellt, verarbeitet den aktuellen Monat automatisch und protokolliert das Ergebnis.
- Batch-Datei start_dispatch.bat zum Start per Doppelklick hinzugefügt.
- Tests mit pytest ausgeführt – 50 bestanden.
2025-08-09 - Monat 2025-08 mit Fehlern verarbeitet.
2025-08-09 - update_liste schreibt Werte nur bei übereinstimmendem Datum und Name; Tests angepasst; pytest 50 bestanden.
2025-08-09 - start_col in update_liste an Wochen-/Tages-Layout angepasst; Kommentar und Test aktualisiert; pytest 50 bestanden.
2025-08-09 - Popupfenster in Tests durch Monkeypatch von run_all_gui._popup_error unterdrückt; pytest 50 bestanden.
2025-08-09 - excel_to_date prüft nun auf leere oder ungültige Werte; optionale Nutzung von openpyxl.from_excel. Tests für fehlende und fehlerhafte Zellen ergänzt; pytest 54 bestanden.
2025-08-09 - update_liste prüft auf fehlende oder ungültige Datumswerte, überspringt solche Zeilen und protokolliert eine Warnung; Tests erweitert; pytest 54 bestanden.
2025-08-09 - Monat 2025-07 erfolgreich verarbeitet.
2025-08-09 - Monat 2025-07 erfolgreich verarbeitet.
2025-08-09 - zentrale Techniker-Aliasliste und normalize_name eingeführt; Warnungen für bekannte Namen entfallen; Tests erweitert; pytest 56 bestanden.

2025-08-09 - normalize_name entfernt, Aliasvarianten in dispatch/name_aliases.py zentralisiert, process_reports nutzt nur canonical_name; Tests angepasst; pytest 56 bestanden.
2025-08-10 - Monat 2025-08 mit Fehlern verarbeitet.
2025-08-10 - versehentlich eingecheckte .pyc-Dateien und __pycache__-Ordner entfernt.
2025-08-10 - update_liste setzt fehlende oder ungültige Datumszellen auf den Tageswert und verarbeitet Techniker weiter; Tests angepasst; pytest 56 bestanden.
2025-08-10 - update_liste ergänzt fehlende Techniker durch neue Zeilen und trägt Tageswerte ein; Tests erweitert; pytest 57 bestanden.
2025-08-10 - update_liste überschreibt abweichende Datumsangaben mit Tageswert und verarbeitet Techniker weiter; Tests angepasst; pytest 57 bestanden.
2025-08-10 - Technikerspalte dynamisch ermittelt und Startspalte relativ zu ihr berechnet; Tests angepasst, neuer Test; pytest 58 bestanden.
2025-08-10 - update_liste fügt verbleibende Techniker per ws.append als neue Zeilen hinzu und normalisiert Namen via canonical_name; pytest 58 bestanden.
2025-08-10 - Startspalte richtet sich jetzt an Technikerspalte + 1 aus; Tests angepasst; pytest 58 bestanden.
2025-08-10 - update_liste stellt sicher, dass eine Technikerspalte existiert oder fügt sie bei Bedarf als erste Spalte ein; Test ergänzt; pytest 59 bestanden.
2025-08-10 - Startspaltenberechnung in update_liste berücksichtigt nun 14 Spalten pro Tag und zusätzliche Leer-Spalten zwischen Wochen; Tests erweitert, Tages- und Wochen-Leer-Spalten simuliert; pytest 60 bestanden.
2025-08-10 - Test für 13-Spalten-Blöcke mit Leer-Spalten zwischen Tagen ergänzt; update_liste für späteren Tag geprüft; pytest 61 bestanden.
2025-08-10 - update_liste nutzt "Name" als Technikerspalte und benennt sie um; Test prüft fehlende zusätzliche Spalte; pytest 61 bestanden.
2025-08-10 - update_liste belässt gültige, aber abweichende Datumswerte unverändert und protokolliert eine Warnung; zusätzliche Tests verhindern Überschreibungen; pytest 62 bestanden.

2025-08-10 - update_liste erkennt optionale Namensspalte in Tagesblöcken, passt Datums- und Startspalten dynamisch an und prüft Kopfzeilen; pytest 62 bestanden.
2025-08-10 - Hilfsfunktion prüft Kopfzeilen der Tagesblöcke und validiert Layout vor dem Schreiben; Tests ergänzt; pytest 64 bestanden.
2025-08-10 - _validate_day_block_headers akzeptiert fehlende Datumsspalte mit "weekday"; Test ergänzt; pytest 65 bestanden.
2025-08-10 - _validate_day_block_headers sucht Tagesblock über date-Überschriften, optionalen 'name' ignoriert; update_liste nutzt erkannte Spalten; Tests angepasst; pytest 64 bestanden.

2025-08-10 - update_liste berücksichtigt prev_day_col und date_col bei max_col, Test für Fall mit prev_day_col rechts von total_col; pytest 65 bestanden.

2025-08-10 - _validate_day_block_headers gibt bei fehlendem Tagesblock nur Warnung und Flag zurück; update_liste überspringt fehlende Blöcke; Test für fehlenden Tagesblock ergänzt; pytest 66 bestanden.
